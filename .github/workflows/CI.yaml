name: Build, Push Docker and Update Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: build-push-helm
  cancel-in-progress: true

jobs:
  build_and_update:
    runs-on: ubuntu-latest

    env:
      # ====== Docker image ======
      IMAGE_NAME: ritatrcr/delivery-app
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # ====== Helm / repos ======
      PAT_HELMCHART: ${{ secrets.PAT_HELMCHART }}   # PAT con RW a ambos repos
      GH_USER: ritatrcr
      HELM_MANIFESTS_REPO: ritatrcr/manifiestos-delivery-app
      HELM_PAGES_REPO: ritatrcr/helm-chart
      HELM_REPO_URL: https://ritatrcr.github.io/helm-chart/
      HELM_PAGES_BRANCH: main

      # Ruta/nombre del chart en el repo de manifiestos
      HELM_CHART_DIR: charts/pedido-app
      HELM_CHART_NAME: pedido-app

    steps:
      # ====== Checkout de este repo (usa GITHUB_TOKEN por defecto) ======
      - name: Checkout app repo (this)
        uses: actions/checkout@v4

      # ====== Validación temprana del PAT contra los dos repos ======
      - name: Validate PAT to both repos
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${PAT_HELMCHART:-}" ] || { echo "::error::Secret PAT_HELMCHART vacío/no configurado"; exit 1; }
          for REPO in "${HELM_MANIFESTS_REPO}" "${HELM_PAGES_REPO}"; do
            echo "Comprobando acceso a https://github.com/${REPO} ..."
            git ls-remote "https://${GH_USER}:${PAT_HELMCHART}@github.com/${REPO}.git" HEAD >/dev/null 2>&1 \
              || { echo "::error::Sin acceso al repo ${REPO} con el PAT (Contents:RW / repo seleccionado / SSO)."; exit 1; }
          done
          echo "PAT OK para ambos repos."

      # ====== Herramientas ======
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install yq
        shell: bash
        run: |
          set -euxo pipefail
          YQ_VERSION=v4.44.3
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          yq --version
          helm version

      # ---- Verifica que la app esté en delivery-app/ ----
      - name: Assert Node files exist
        shell: bash
        run: |
          set -euxo pipefail
          test -f delivery-app/package.json || (echo "Falta delivery-app/package.json" && exit 1)
          test -f delivery-app/package-lock.json || (echo "Falta delivery-app/package-lock.json" && exit 1)

      # ====== Docker multi-arch build ======
      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ====== LOGIN A DOCKER HUB ======
      - name: Validate DockerHub secrets
        shell: bash
        run: |
          set -euxo pipefail
          [ -n "${DOCKERHUB_USERNAME}" ] || { echo "::error::Missing DOCKERHUB_USERNAME secret"; exit 1; }
          [ -n "${DOCKERHUB_TOKEN}" ]    || { echo "::error::Missing DOCKERHUB_TOKEN secret"; exit 1; }

      - name: Logout any previous registry sessions (safety)
        run: docker logout || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Verify Docker login (must be ritatrcr)
        shell: bash
        run: |
          set -euxo pipefail
          WHO=$(docker info 2>/dev/null | awk -F': ' '/^ Username:/ {print $2}')
          echo "Logged in as: ${WHO}"
          [ "$WHO" = "ritatrcr" ] || { echo "::error::Estás logueado como '$WHO', debe ser 'ritatrcr'"; exit 1; }

      # ====== LEE VERSIÓN DESDE package.json ======
      - name: Read app version
        id: vars
        shell: bash
        working-directory: ./delivery-app
        run: |
          set -euxo pipefail
          APP_VERSION=$(node -e "console.log(require('./package.json').version || '0.0.0')")
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"
          SHORT_SHA="${GITHUB_SHA::7}"
          CI_TAG="ci-${{ github.run_number }}-${SHORT_SHA}"
          echo "CI_TAG=$CI_TAG" >> "$GITHUB_ENV"
          echo "Using APP_VERSION=$APP_VERSION CI_TAG=$CI_TAG"

      - name: Compute release vars (docker & chart)
        shell: bash
        run: |
          set -euxo pipefail
          : "${APP_VERSION:?APP_VERSION no está definido (ver paso Read app version)}"
          DOCKER_VERSION="v${APP_VERSION}"
          CHART_VERSION="${APP_VERSION}+${{ github.run_number }}"
          echo "DOCKER_VERSION=$DOCKER_VERSION"
          echo "CHART_VERSION=$CHART_VERSION"
          echo "DOCKER_VERSION=$DOCKER_VERSION" >> "$GITHUB_ENV"
          echo "CHART_VERSION=$CHART_VERSION"   >> "$GITHUB_ENV"

      # ====== BUILD & PUSH MULTI-ARCH ======
      - name: Build & Push image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:v${{ steps.vars.outputs.APP_VERSION }}
            ${{ env.IMAGE_NAME }}:${{ env.CI_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show pushed tags
        shell: bash
        run: |
          set -euxo pipefail
          echo "Pushed:"
          echo "  - $IMAGE_NAME:latest"
          echo "  - $IMAGE_NAME:v${APP_VERSION}"
          echo "  - $IMAGE_NAME:${CI_TAG}"

      # ====== Checkout del repo de manifiestos con TOKEN ======
      - name: Checkout manifests repo (ritatrcr/manifiestos-delivery-app)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HELM_MANIFESTS_REPO }}
          ref: main
          path: manifests
          token: ${{ secrets.PAT_HELMCHART }}
          persist-credentials: false

      - name: Verify git remote (manifests)
        shell: bash
        run: |
          set -euxo pipefail
          cd manifests
          git remote -v

      # ====== Actualizar values y Chart.yaml, commit & push con PAT ======
      - name: Update values-dev/prod with new Docker tag and (optionally) Chart.yaml version
        shell: bash
        env:
          GIT_USER: ${{ env.GH_USER }}
          PAT: ${{ secrets.PAT_HELMCHART }}
        run: |
          set -euo pipefail
          cd manifests

          # --- CREDENCIALES EN EL REMOTO (ANTES de cualquier fetch/pull/push) ---
          git remote set-url origin "https://${GIT_USER}:${PAT}@github.com/${HELM_MANIFESTS_REPO}.git"

          echo "Usando IMAGE_NAME=${IMAGE_NAME}"
          echo "Usando APP_VERSION=${APP_VERSION}  (Chart.yaml no lleva 'v')"
          echo "Usando DOCKER_VERSION=${DOCKER_VERSION}  (ej: v0.1.5)"

          # Función que intenta actualizar app.image.*, backend.image.*, frontend.image.*
          bump_images () {
            local file="$1"
            echo "Actualizando $file"

            # app.image.*
            yq -i '
              (.app.image.repository |= env(IMAGE_NAME)) |
              (.app.image.tag        |= env(DOCKER_VERSION))
            ' "$file" || true

            # backend.image.* y frontend.image.*
            yq -i '
              (.backend.image.repository |= env(IMAGE_NAME)) |
              (.backend.image.tag        |= env(DOCKER_VERSION)) |
              (.frontend.image.repository |= env(IMAGE_NAME)) |
              (.frontend.image.tag        |= env(DOCKER_VERSION))
            ' "$file" || true
          }

          # Actualiza values-dev/prod si existen
          for f in \
            "${HELM_CHART_DIR}/values-dev.yaml" \
            "${HELM_CHART_DIR}/values-prod.yaml"
          do
            [ -f "$f" ] && bump_images "$f" || echo "Archivo no encontrado (ok): $f"
          done

          # ====== OPCIONAL: fija la versión del Chart a la versión de la app ======
          if [ -f "${HELM_CHART_DIR}/Chart.yaml" ]; then
            echo "Ajustando Chart.yaml version -> ${APP_VERSION}"
            yq -i ".version = strenv(APP_VERSION)" "${HELM_CHART_DIR}/Chart.yaml"
            # O con build metadata:
            # yq -i ".version = \"${APP_VERSION}+${{ github.run_number }}\"" "${HELM_CHART_DIR}/Chart.yaml"
          else
            echo "No existe Chart.yaml en ${HELM_CHART_DIR} (no se actualiza versión)."
          fi

          # Git commit + push
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git commit -m "chore: set image ${IMAGE_NAME}:${DOCKER_VERSION} and chart version ${APP_VERSION}" || echo "No hay cambios que commitear"
          git push origin main
