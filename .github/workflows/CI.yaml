name: Build, Push Docker and Update Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: build-push-helm
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build_and_update:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ritatrcr/delivery-app
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      PAT_HELMCHART: ${{ secrets.PAT_HELMCHART }}
      GH_USER: ritatrcr
      HELM_MANIFESTS_REPO: ritatrcr/manifiestos-delivery-app
      HELM_PAGES_REPO: ritatrcr/helm-chart
      HELM_REPO_URL: https://ritatrcr.github.io/helm-chart/
      HELM_PAGES_BRANCH: main
      HELM_CHART_DIR: charts/pedido-app
      HELM_CHART_NAME: pedido-app

    steps:
      - name: Checkout app repo (this)
        uses: actions/checkout@v4
        with:
            ref: main
            fetch-depth: 0

      - name: Validate PAT to both repos
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${PAT_HELMCHART:-}" ] || { echo "::error::Secret PAT_HELMCHART vacío/no configurado"; exit 1; }
          for REPO in "${HELM_MANIFESTS_REPO}" "${HELM_PAGES_REPO}"; do
            git ls-remote "https://${GH_USER}:${PAT_HELMCHART}@github.com/${REPO}.git" HEAD >/dev/null 2>&1 \
              || { echo "::error::Sin acceso al repo ${REPO} con el PAT"; exit 1; }
          done

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install yq
        shell: bash
        run: |
          set -euxo pipefail
          YQ_VERSION=v4.44.3
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          yq --version
          helm version

      - name: Sync to latest main
        shell: bash
        run: |
          set -euxo pipefail
          git fetch origin main
          git checkout main
          git pull --no-rebase origin main
          git log -1 --oneline

      - name: Assert Node files exist
        shell: bash
        run: |
          set -euxo pipefail
          test -f delivery-app/package.json
          test -f delivery-app/package-lock.json || true

      - name: Bump app version (patch) and commit [skip ci]
        shell: bash
        working-directory: ./delivery-app
        run: |
          set -euxo pipefail
          CUR=$(node -e "console.log(require('./package.json').version)")
          npm version patch --no-git-tag-version
          NEW=$(node -e "console.log(require('./package.json').version)")
          echo "APP_VERSION=$NEW" >> "$GITHUB_ENV"
          cd ..
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add delivery-app/package.json delivery-app/package-lock.json || true
          git commit -m "chore(ci): bump app version $CUR -> $NEW [skip ci]" || true
          git push || true

      - name: Ensure APP_VERSION in env
        shell: bash
        working-directory: ./delivery-app
        run: |
          set -euxo pipefail
          [ -n "${APP_VERSION:-}" ] || echo "APP_VERSION=$(node -e "console.log(require('./package.json').version)")" >> "$GITHUB_ENV"

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate DockerHub secrets
        shell: bash
        run: |
          set -euxo pipefail
          [ -n "${DOCKERHUB_USERNAME}" ]
          [ -n "${DOCKERHUB_TOKEN}" ]

      - name: Logout any previous registry sessions
        run: docker logout || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Verify Docker login
        shell: bash
        run: |
          set -euxo pipefail
          WHO=$(docker info 2>/dev/null | awk -F': ' '/^ Username:/ {print $2}')
          [ "$WHO" = "ritatrcr" ] || { echo "::error::Logged in as '$WHO'"; exit 1; }

      - name: Compute release vars (docker & chart)
        shell: bash
        run: |
          set -euxo pipefail
          : "${APP_VERSION:?APP_VERSION no está definido}"
          DOCKER_VERSION="v${APP_VERSION}"
          CHART_VERSION="${APP_VERSION}+${{ github.run_number }}"
          echo "DOCKER_VERSION=$DOCKER_VERSION" >> "$GITHUB_ENV"
          echo "CHART_VERSION=$CHART_VERSION"   >> "$GITHUB_ENV"

      - name: Build & Push image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:v${{ env.APP_VERSION }}
            ${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show pushed tags
        shell: bash
        run: |
          set -euxo pipefail
          echo "$IMAGE_NAME:latest"
          echo "$IMAGE_NAME:v${APP_VERSION}"
          echo "$IMAGE_NAME:${APP_VERSION}-${GITHUB_SHA}"

      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HELM_MANIFESTS_REPO }}
          ref: main
          path: manifests
          token: ${{ secrets.PAT_HELMCHART }}

      - name: Verify git remote (manifests)
        shell: bash
        run: |
          set -euxo pipefail
          cd manifests
          git remote -v

      - name: Update values-dev/prod and Chart.yaml, push
        shell: bash
        env:
          GIT_USER: ritatrcr
          PAT: ${{ secrets.PAT_HELMCHART }}
        run: |
          set -euo pipefail
          cd manifests
          git remote set-url origin "https://${GIT_USER}:${PAT}@github.com/${HELM_MANIFESTS_REPO}.git"
          DOCKER_VERSION="v${APP_VERSION}"
          bump_images () {
            local file="$1"
            [ -f "$file" ] || { echo "Skip $file"; return 0; }
            yq -i '
              (.app.image.repository      |= env(IMAGE_NAME)) |
              (.app.image.tag             |= env(DOCKER_VERSION)) |
              (.backend.image.repository  |= env(IMAGE_NAME)) |
              (.backend.image.tag         |= env(DOCKER_VERSION)) |
              (.frontend.image.repository |= env(IMAGE_NAME)) |
              (.frontend.image.tag        |= env(DOCKER_VERSION))
            ' "$file" || true
          }
          bump_images "${HELM_CHART_DIR}/values-dev.yaml"
          bump_images "${HELM_CHART_DIR}/values-prod.yaml"
          if [ -f "${HELM_CHART_DIR}/Chart.yaml" ]; then
            yq -i ".version = strenv(APP_VERSION)" "${HELM_CHART_DIR}/Chart.yaml"
          fi
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git commit -m "chore: image ${IMAGE_NAME}:${DOCKER_VERSION} chart ${APP_VERSION}" || echo "No hay cambios"
          git push origin main || true


      - name: Final sync (manifests -> origin/main)
        shell: bash
        run: |
          set -euxo pipefail
          cd manifests
          git fetch --prune origin main
          git reset --hard origin/main
          git log -1 --oneline

      - name: Final sync (app repo -> origin/main)
        shell: bash
        run: |
          set -euxo pipefail
          git fetch --prune origin main
          git reset --hard origin/main
          git log -1 --oneline