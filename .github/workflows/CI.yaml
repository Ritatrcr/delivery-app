name: Build, Push Docker and Update Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: build-push-helm
  cancel-in-progress: true

jobs:
  build_and_update:
    runs-on: ubuntu-latest

    env:
      # ====== Docker image ======
      IMAGE_NAME: ritatrcr/delivery-app
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # ====== Helm / repos ======
      PAT_HELMCHART: ${{ secrets.PAT_HELMCHART }}       # PAT con RW a ambos repos
      HELM_MANIFESTS_REPO: ritatrcr/manifiestos-delivery-app
      HELM_PAGES_REPO: ritatrcr/helm-chart
      HELM_REPO_URL: https://ritatrcr.github.io/helm-chart/
      HELM_PAGES_BRANCH: main

      # Ruta/nombre del chart en el repo de manifiestos
      HELM_CHART_DIR: charts/pedido-app
      HELM_CHART_NAME: pedido-app

    steps:
      # ====== Checkout de este repo (app-delivery) con PAT ======
      - name: Checkout app repo (this)
        uses: actions/checkout@v4
        with:
          token: ${{ env.PAT_HELMCHART }}   # <- evita usar GITHUB_TOKEN implícito
          persist-credentials: false

      # ====== Validación temprana del PAT ======
      - name: Validate PAT
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${PAT_HELMCHART:-}" ] || { echo "::error::Secret PAT_HELMCHART vacío/no configurado"; exit 1; }
          # Sanity check contra la API; 401/403 => PAT inválido o sin permisos
          curl -sSf -H "Authorization: Bearer ${PAT_HELMCHART}" https://api.github.com/user >/dev/null

      # ====== Herramientas ======
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install yq
        shell: bash
        run: |
          set -euxo pipefail
          YQ_VERSION=v4.44.3
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          yq --version
          helm version

      # ---- Verifica que la app esté en delivery-app/ ----
      - name: Assert Node files exist
        shell: bash
        run: |
          set -euxo pipefail
          test -f delivery-app/package.json || (echo "Falta delivery-app/package.json" && exit 1)
          test -f delivery-app/package-lock.json || (echo "Falta delivery-app/package-lock.json" && exit 1)

      # ====== Docker multi-arch build ======
      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ====== LOGIN A DOCKER HUB ======
      - name: Validate DockerHub secrets
        shell: bash
        run: |
          set -euxo pipefail
          [ -n "${DOCKERHUB_USERNAME}" ] || { echo "::error::Missing DOCKERHUB_USERNAME secret"; exit 1; }
          [ -n "${DOCKERHUB_TOKEN}" ]    || { echo "::error::Missing DOCKERHUB_TOKEN secret"; exit 1; }

      - name: Logout any previous registry sessions (safety)
        run: docker logout || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Verify Docker login (must be ritatrcr)
        shell: bash
        run: |
          set -euxo pipefail
          WHO=$(docker info 2>/dev/null | awk -F': ' '/^ Username:/ {print $2}')
          echo "Logged in as: ${WHO}"
          [ "$WHO" = "ritatrcr" ] || { echo "::error::Estás logueado como '$WHO', debe ser 'ritatrcr'"; exit 1; }

      # ====== LEE VERSIÓN DESDE package.json ======
      - name: Read app version
        id: vars
        shell: bash
        working-directory: ./delivery-app
        run: |
          set -euxo pipefail
          APP_VERSION=$(node -e "console.log(require('./package.json').version || '0.0.0')")
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"
          SHORT_SHA="${GITHUB_SHA::7}"
          CI_TAG="ci-${{ github.run_number }}-${SHORT_SHA}"
          echo "CI_TAG=$CI_TAG" >> "$GITHUB_ENV"
          echo "Using APP_VERSION=$APP_VERSION CI_TAG=$CI_TAG"

      - name: Compute release vars (docker & chart)
        shell: bash
        run: |
          set -euxo pipefail
          : "${APP_VERSION:?APP_VERSION no está definido (ver paso Read app version)}"
          DOCKER_VERSION="v${APP_VERSION}"
          CHART_VERSION="${APP_VERSION}+${{ github.run_number }}"
          echo "DOCKER_VERSION=$DOCKER_VERSION"
          echo "CHART_VERSION=$CHART_VERSION"
          echo "DOCKER_VERSION=$DOCKER_VERSION" >> "$GITHUB_ENV"
          echo "CHART_VERSION=$CHART_VERSION"   >> "$GITHUB_ENV"

      # ====== BUILD & PUSH MULTI-ARCH ======
      - name: Build & Push image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:v${{ steps.vars.outputs.APP_VERSION }}
            ${{ env.IMAGE_NAME }}:${{ env.CI_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show pushed tags
        shell: bash
        run: |
          set -euxo pipefail
          echo "Pushed:"
          echo "  - $IMAGE_NAME:latest"
          echo "  - $IMAGE_NAME:v${APP_VERSION}"
          echo "  - $IMAGE_NAME:${CI_TAG}"

      # ====== CHECKOUT DEL REPO DE MANIFIESTOS (CHART FUENTE) ======
      - name: Checkout manifests repo (chart fuente)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HELM_MANIFESTS_REPO }}
          token: ${{ env.PAT_HELMCHART }}   # <- usa el mismo PAT
          path: manifiestos
          persist-credentials: false

      # ====== AUTODETECCIÓN DE RUTA DEL CHART ======
      - name: Detect chart directory
        id: chartdir
        shell: bash
        run: |
          set -euxo pipefail
          CANDIDATE1="manifiestos/${HELM_CHART_DIR}"
          CANDIDATE2="${HELM_CHART_DIR}"
          if [ -d "$CANDIDATE1" ]; then
            CHART_DIR="$CANDIDATE1"
          elif [ -d "$CANDIDATE2" ]; then
            CHART_DIR="$CANDIDATE2"
          else
            echo "::error::No se encontró el chart en '$CANDIDATE1' ni en '$CANDIDATE2'"
            ls -lah manifiestos || true
            exit 1
          fi
          echo "CHART_DIR=$CHART_DIR" >> "$GITHUB_OUTPUT"
          echo "CHART_DIR=$CHART_DIR" >> "$GITHUB_ENV"
          echo "Usando CHART_DIR=$CHART_DIR"

      - name: Lint Helm chart
        shell: bash
        run: |
          set -euxo pipefail
          helm lint "$CHART_DIR"

      - name: Update Helm chart values.yaml (image repo & tag)
        shell: bash
        run: |
          set -euxo pipefail
          cd "$CHART_DIR"
          yq -i ".image.repository = \"${IMAGE_NAME}\"" values.yaml
          yq -i ".image.tag = \"${DOCKER_VERSION}\""     values.yaml
          echo "values.yaml actualizado"

      - name: Update Chart version in Chart.yaml
        shell: bash
        run: |
          set -euxo pipefail
          cd "$CHART_DIR"
          yq -i ".version = \"${CHART_VERSION}\"" Chart.yaml
          yq -i ".appVersion = \"v${APP_VERSION}\"" Chart.yaml
          echo "Chart.yaml actualizado"

      - name: Package Helm Chart
        id: pkg
        shell: bash
        run: |
          set -euxo pipefail
          # Empaqueta el chart en el workspace (archivo: pedido-app-<CHART_VERSION>.tgz)
          helm package "$CHART_DIR" -d "$GITHUB_WORKSPACE"
          PKG_PATH="$(ls -1t "$GITHUB_WORKSPACE/${HELM_CHART_NAME}-"*.tgz | head -n 1)"
          test -f "$PKG_PATH"
          echo "CHART_PKG=$PKG_PATH" >> "$GITHUB_ENV"
          echo "Empaquetado: $PKG_PATH"
          # Verifica que incluya values-dev/prod si los usas
          tar -tzf "$PKG_PATH" | grep -E 'values-(dev|prod)\.yaml' || true

      # ====== PAGES REPO (ÍNDICE DE CHARTS) ======
      - name: Checkout helm-chart repo (GitHub Pages)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HELM_PAGES_REPO }}
          token: ${{ env.PAT_HELMCHART }}  # <- usa el mismo PAT
          path: helm-chart
          ref: ${{ env.HELM_PAGES_BRANCH }}
          persist-credentials: false

      - name: Copy packaged chart to helm-chart repo
        shell: bash
        run: |
          set -euxo pipefail
          cp "${CHART_PKG}" helm-chart/
          ls -lah helm-chart

      - name: Update Helm repo index (merge)
        shell: bash
        run: |
          set -euxo pipefail
          cd helm-chart
          if [ -f index.yaml ]; then
            helm repo index . --url "${HELM_REPO_URL}" --merge index.yaml
          else
            helm repo index . --url "${HELM_REPO_URL}"
          fi
          head -n 40 index.yaml

      - name: Commit and push changes to helm-chart repo
        shell: bash
        env:
          PAT_USER: ritatrcr
        run: |
          set -euxo pipefail
          cd helm-chart
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          # Evita non-fast-forward
          git fetch origin "${HELM_PAGES_BRANCH}" || true
          git pull --rebase origin "${HELM_PAGES_BRANCH}" || true
          git add -A
          git commit -m "Publish chart ${HELM_CHART_NAME} ${CHART_VERSION}" || echo "No commit needed"
          # Fuerza remoto con PAT para evitar 403 / Bad credentials
          git remote set-url origin "https://${PAT_USER}:${PAT_HELMCHART}@github.com/${HELM_PAGES_REPO}.git"
          git push origin "${HELM_PAGES_BRANCH}"
