name: Build, Push Docker and Publish Helm Chart

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: build-push-helm
  cancel-in-progress: true

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    env:
      # ========= Docker =========
      IMAGE_NAME: ritatrcr/delivery-app
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # ========= GitHub / PAT =========
      GH_USER: ritatrcr
      PAT_HELMCHART: ${{ secrets.PAT_HELMCHART }}   # PAT con Contents:RW + SSO en ambos repos

      # ========= Repos externos =========
      HELM_MANIFESTS_REPO: ritatrcr/manifiestos-delivery-app
      HELM_PAGES_REPO:     ritatrcr/helm-chart
      HELM_PAGES_BRANCH:   main
      HELM_REPO_URL:       https://ritatrcr.github.io/helm-chart/

      # ========= Ubicación del chart en el repo de manifiestos =========
      HELM_CHART_DIR: charts/pedido-app
      HELM_CHART_NAME: pedido-app

      # (Opcional) rutas de values por ambiente dentro del chart
      VALUES_DEV:  values-dev.yaml
      VALUES_PROD: values-prod.yaml

    steps:
      # ============ Checkout repo de la app ============
      - name: Checkout (app repo)
        uses: actions/checkout@v4

      # ============ Herramientas ============
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install yq
        shell: bash
        run: |
          set -euxo pipefail
          YQ_VERSION=v4.44.3
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          helm version && yq --version

      - name: Setup QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      # ============ Login Docker Hub ============
      - name: Validate DockerHub secrets
        shell: bash
        run: |
          set -euxo pipefail
          [ -n "${DOCKERHUB_USERNAME}" ] || { echo "::error::Missing DOCKERHUB_USERNAME"; exit 1; }
          [ -n "${DOCKERHUB_TOKEN}" ]    || { echo "::error::Missing DOCKERHUB_TOKEN"; exit 1; }

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # ============ Leer versión de la app ============
      # Si NO es Node, reemplaza este paso por tu forma de versionar (p.ej. Maven, Gradle, Poetry, etc.)
      - name: Read APP_VERSION from package.json
        id: ver
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f package.json ]; then
            APP_VERSION=$(node -e "console.log(require('./package.json').version || '0.0.0')")
          elif [ -f delivery-app/package.json ]; then
            APP_VERSION=$(node -e "console.log(require('./delivery-app/package.json').version || '0.0.0')")
          else
            echo "::warning::No se encontró package.json; usando 0.0.0"
            APP_VERSION="0.0.0"
          fi
          echo "APP_VERSION=$APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"

          SHORT_SHA="${GITHUB_SHA::7}"
          CI_TAG="ci-${{ github.run_number }}-${SHORT_SHA}"
          echo "CI_TAG=$CI_TAG" >> "$GITHUB_ENV"

          # Normalizamos etiquetas de Docker y Chart
          echo "DOCKER_VERSION=v${APP_VERSION}" >> "$GITHUB_ENV"
          # El chart usará <APP_VERSION> + run para evitar colisiones (p.ej. 1.2.3+57)
          echo "CHART_VERSION=${APP_VERSION}+${{ github.run_number }}" >> "$GITHUB_ENV"

      # ============ Build & Push multi-arch ============
      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.DOCKER_VERSION }}
            ${{ env.IMAGE_NAME }}:${{ env.CI_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show pushed tags
        shell: bash
        run: |
          echo "Pushed:"
          echo " - $IMAGE_NAME:latest"
          echo " - $IMAGE_NAME:${DOCKER_VERSION}"
          echo " - $IMAGE_NAME:${CI_TAG}"

      # ============ Validación de PAT contra ambos repos ============
      - name: Validate PAT against repos
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${PAT_HELMCHART:-}" ] || { echo "::error::PAT_HELMCHART vacío"; exit 1; }
          for REPO in "${HELM_MANIFESTS_REPO}" "${HELM_PAGES_REPO}"; do
            echo "Testing https://github.com/${REPO} ..."
            git ls-remote "https://${GH_USER}:${PAT_HELMCHART}@github.com/${REPO}.git" HEAD >/dev/null || {
              echo "::error::Sin acceso a ${REPO} con el PAT (Contents:RW / SSO)"; exit 1;
            }
          done
          echo "PAT OK."

      # ============ Clonar repos externos ============
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HELM_MANIFESTS_REPO }}
          path: manifests
          token: ${{ env.PAT_HELMCHART }}
          persist-credentials: false

      - name: Checkout helm-chart (Pages) repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.HELM_PAGES_REPO }}
          ref: ${{ env.HELM_PAGES_BRANCH }}
          path: helm-pages
          token: ${{ env.PAT_HELMCHART }}
          persist-credentials: false

      # ============ Actualizar values y Chart.yaml con la versión Docker ============
      - name: Bump image tag in values (dev/prod) and set appVersion
        shell: bash
        run: |
          set -euxo pipefail
          CHART_DIR="manifests/${HELM_CHART_DIR}"

          test -f "${CHART_DIR}/Chart.yaml"
          yq -i ".appVersion = \"${DOCKER_VERSION}\"" "${CHART_DIR}/Chart.yaml"

          # Si usas estructura tipo:
          # image:
          #   repository: ritatrcr/delivery-app
          #   tag: vX.Y.Z
          for F in "${VALUES_DEV}" "${VALUES_PROD}"; do
            P="${CHART_DIR}/${F}"
            if [ -f "$P" ]; then
              yq -i ".image.repository = \"${IMAGE_NAME}\"" "$P" || true
              yq -i ".image.tag = \"${DOCKER_VERSION}\"" "$P" || true
            fi
          done

          echo "==== Chart.yaml (head) ===="
          head -n 20 "${CHART_DIR}/Chart.yaml"

      # ============ Lint, setear version del chart y empaquetar ============
      - name: Lint chart
        shell: bash
        run: |
          set -euxo pipefail
          helm lint "manifests/${HELM_CHART_DIR}"

      - name: Set Chart version and commit manifests
        shell: bash
        env:
          PAT_USER: ${{ env.GH_USER }}
          PAT_TOKEN: ${{ env.PAT_HELMCHART }}
        run: |
          set -euxo pipefail
          CHART_DIR="manifests/${HELM_CHART_DIR}"

          # El .tgz llevará version = APP_VERSION+run (derivada de Docker)
          yq -i ".version = \"${CHART_VERSION}\"" "${CHART_DIR}/Chart.yaml"

          cd manifests
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add "${HELM_CHART_DIR}/Chart.yaml" \
                  "${HELM_CHART_DIR}/${VALUES_DEV}" \
                  "${HELM_CHART_DIR}/${VALUES_PROD}" || true
          git commit -m "chore(chart): appVersion=${DOCKER_VERSION} version=${CHART_VERSION} image=${IMAGE_NAME}:${DOCKER_VERSION}" || echo "No commit needed"

          # Push de cambios al repo de manifiestos
          git remote set-url origin "https://${PAT_USER}:${PAT_TOKEN}@github.com/${HELM_MANIFESTS_REPO}.git"
          git pull --rebase || true
          git push origin HEAD:main

      - name: Package chart into helm-pages repo
        id: pkg
        shell: bash
        run: |
          set -euxo pipefail
          CHART_DIR="manifests/${HELM_CHART_DIR}"

          # Empaquetar directo dentro de helm-pages/
          helm package "${CHART_DIR}" -d "helm-pages"

          PKG_PATH="$(ls -1t helm-pages/${HELM_CHART_NAME}-*.tgz | head -n 1)"
          test -f "$PKG_PATH"
          echo "PKG_PATH=$PKG_PATH" >> "$GITHUB_OUTPUT"

          # Validar que el .tgz use la CHART_VERSION esperada
          BN="$(basename "$PKG_PATH")"
          PKG_VER="${BN#${HELM_CHART_NAME}-}"
          PKG_VER="${PKG_VER%.tgz}"
          echo "Empaquetado: $BN (version=$PKG_VER)"
          if [ "$PKG_VER" != "${CHART_VERSION}" ]; then
            echo "::error::El tgz ($PKG_VER) no coincide con CHART_VERSION (${CHART_VERSION})"; exit 1
          fi

      # ============ Regenerar/merge index.yaml y publicar a Pages ============
      - name: Update index.yaml (merge) in helm-pages
        shell: bash
        run: |
          set -euxo pipefail
          cd helm-pages
          if [ -f index.yaml ]; then
            helm repo index . --url "${HELM_REPO_URL}" --merge index.yaml
          else
            helm repo index . --url "${HELM_REPO_URL}"
          fi
          echo "==== index.yaml (head) ===="
          head -n 25 index.yaml
          echo "==== paquetes ===="
          ls -lh *.tgz

      - name: Commit & push to helm-chart (Pages)
        shell: bash
        env:
          PAT_USER: ${{ env.GH_USER }}
          PAT_TOKEN: ${{ env.PAT_HELMCHART }}
        run: |
          set -euxo pipefail
          cd helm-pages
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git commit -m "Publish ${HELM_CHART_NAME} ${CHART_VERSION} (app ${DOCKER_VERSION})" || echo "No commit needed"
          git remote set-url origin "https://${PAT_USER}:${PAT_TOKEN}@github.com/${HELM_PAGES_REPO}.git"
          git pull --rebase || true
          git push origin "${HELM_PAGES_BRANCH}"
