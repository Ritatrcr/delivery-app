name: Build & Publish Helm Chart to Pages

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]     # también corre al crear tags vX.Y.Z
  workflow_dispatch: {}

concurrency:
  group: publish-helm
  cancel-in-progress: true

env:
  GH_USER: Ritatrcr
  MANIFESTS_REPO: manifiestos-delivery-app    # chart fuente
  CHART_REPO: helm-chart                      # repo de Pages
  CHART_PATH: charts/pedido-app               # ruta del chart dentro de MANIFESTS_REPO
  PAGES_URL: https://Ritatrcr.github.io/helm-chart

jobs:
  publish-helm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 1) Repo que dispara el flujo (delivery-app)
      - name: Checkout (delivery-app)
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Setup yq
        uses: mikefarah/yq@v4.44.3
        with:
          cmd: --version

      # 2) Calcular versión de chart
      - name: Compute chart version
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +%Y.%m.%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi
          echo "shortsha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # 3) Clonar repo con el chart fuente (manifiestos)
      - name: Checkout manifests repo (read-only)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GH_USER }}/${{ env.MANIFESTS_REPO }}
          path: manifests
          token: ${{ secrets.GH_PAT }}   # PAT con scope repo

      # (OPCIONAL) Bump de versión/tag dentro del chart (no se push-ea a manifiestos)
      - name: Bump chart version and image tag (no-push)
        working-directory: manifests/${{ env.CHART_PATH }}
        run: |
          # Asegura version en Chart.yaml
          yq -i '.version = "${{ steps.ver.outputs.version }}"' Chart.yaml || true
          # Si tus values usan esta clave, propaga tag de imagen
          for f in values.yaml values-dev.yaml values-prod.yaml; do
            [ -f "$f" ] && yq -i '.app.image.tag = "${{ steps.ver.outputs.shortsha }}"' "$f" || true
          done

      # 4) Resolver dependencias del chart
      - name: Helm dependency update
        working-directory: manifests/${{ env.CHART_PATH }}
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dependency update

      # 5) Empaquetar chart -> .tgz
      - name: Package chart
        run: |
          mkdir -p packaged
          helm package "manifests/${{ env.CHART_PATH }}" -d packaged
          ls -l packaged
          echo "PKG=$(ls packaged/*.tgz)" >> $GITHUB_ENV

      # 6) Clonar repo de Pages y asegurar rama gh-pages
      - name: Checkout helm-chart (default branch)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GH_USER }}/${{ env.CHART_REPO }}
          path: charts-publish
          token: ${{ secrets.GH_PAT }}

      - name: Ensure gh-pages branch
        working-directory: charts-publish
        run: |
          git fetch origin gh-pages || true
          if git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
            rm -rf .
            echo "# Helm Chart Repo" > README.md
            touch .nojekyll
            git add .
            git -c user.name="github-actions" -c user.email="actions@github.com" commit -m "init gh-pages"
          fi

      # 7) Copiar .tgz y regenerar index.yaml (merge si existe)
      - name: Add tgz and rebuild index.yaml
        working-directory: charts-publish
        run: |
          cp -v "${PKG}" .
          touch .nojekyll
          if [ -f index.yaml ]; then
            helm repo index . --url "${{ env.PAGES_URL }}" --merge index.yaml
          else
            helm repo index . --url "${{ env.PAGES_URL }}"
          fi
          git add .
          git -c user.name="github-actions" -c user.email="actions@github.com" commit -m "Publish chart ${{ steps.ver.outputs.version }}" || echo "No changes"

      # 8) Push a gh-pages
      - name: Push to gh-pages
        working-directory: charts-publish
        run: git push origin gh-pages
