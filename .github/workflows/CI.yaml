name: Build, Push Docker and Update Helm Chart

on:
  push:
    branches:
      - main

jobs:
  build_and_update:
    runs-on: ubuntu-latest

    env:
      # ====== Docker image ======
      IMAGE_NAME: ritatrcr/delivery-app
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # ====== Helm / repos ======
      HELM_PAT: ${{ secrets.PAT_HELMCHART }}              # PAT con RW a ambos repos
      HELM_MANIFESTS_REPO: ritatrcr/manifiestos-delivery-app
      HELM_PAGES_REPO: ritatrcr/helm-chart
      HELM_REPO_URL: https://ritatrcr.github.io/helm-chart/
      HELM_PAGES_BRANCH: main  

      # Ruta/nombre por defecto del chart (se validará/auto-detectará)
      HELM_CHART_DIR: charts/pedido-app
      HELM_CHART_NAME: pedido-app
      

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Install yq
        shell: bash
        run: |
          set -e
          YQ_VERSION=v4.44.3
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          yq --version
          helm version


      # ---- Verifica que la app esté en delivery-app/ ----
      - name: Assert Node files exist
        shell: bash
        run: |
          set -e
          test -f delivery-app/package.json || (echo "Falta delivery-app/package.json" && exit 1)
          test -f delivery-app/package-lock.json || (echo "Falta delivery-app/package-lock.json" && exit 1)

      # ====== Docker multi-arch build ======
      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ====== LOGIN A DOCKER HUB (forzado y validado) ======
      - name: Validate DockerHub secrets
        shell: bash
        run: |
          set -e
          [ -n "${DOCKERHUB_USERNAME}" ] || { echo "::error::Missing DOCKERHUB_USERNAME secret"; exit 1; }
          [ -n "${DOCKERHUB_TOKEN}" ]    || { echo "::error::Missing DOCKERHUB_TOKEN secret"; exit 1; }

      - name: Logout any previous registry sessions (safety)
        run: docker logout || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Verify Docker login (must be ritatrcr)
        shell: bash
        run: |
          set -e
          WHO=$(docker info 2>/dev/null | awk -F': ' '/^ Username:/ {print $2}')
          echo "Logged in as: ${WHO}"
          [ "$WHO" = "ritatrcr" ] || { echo "::error::Estás logueado como '$WHO', debe ser 'ritatrcr'"; exit 1; }

      # ====== LEE VERSIÓN DESDE package.json ======
      - name: Read app version
        id: vars
        shell: bash
        working-directory: ./delivery-app
        run: |
          set -e
          APP_VERSION=$(node -e "console.log(require('./package.json').version || '0.0.0')")
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"
          SHORT_SHA="${GITHUB_SHA::7}"
          CI_TAG="ci-${{ github.run_number }}-${SHORT_SHA}"
          echo "CI_TAG=$CI_TAG" >> "$GITHUB_ENV"
          echo "Using APP_VERSION=$APP_VERSION CI_TAG=$CI_TAG"

      - name: Compute release vars (docker & chart)
        shell: bash
        run: |
          set -e
          echo "DOCKER_VERSION=v${APP_VERSION}" >> "$GITHUB_ENV"
          # Puedes cambiar '+' por '.' si prefieres semver puro
          echo "CHART_VERSION=${APP_VERSION}+${{ github.run_number }}" >> "$GITHUB_ENV"
          echo "DOCKER_VERSION=$DOCKER_VERSION"
          echo "CHART_VERSION=$CHART_VERSION"

      # ====== BUILD & PUSH MULTI-ARCH ======
      - name: Build & Push image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          # Dockerfile en la raíz que copia desde ./delivery-app
          # Si tu Dockerfile vive en delivery-app/, ajusta:
          #   context: ./delivery-app
          #   file: ./delivery-app/Dockerfile
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:v${{ steps.vars.outputs.APP_VERSION }}
            ${{ env.IMAGE_NAME }}:${{ env.CI_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show pushed tags
        shell: bash
        run: |
          echo "Pushed:"
          echo "  - $IMAGE_NAME:latest"
          echo "  - $IMAGE_NAME:v${APP_VERSION}"
          echo "  - $IMAGE_NAME:${CI_TAG}"

      - name: Inspect image manifest (optional)
        continue-on-error: true
        shell: bash
        run: docker buildx imagetools inspect "$IMAGE_NAME:latest" || true




      - name: Checkout manifests repo (chart fuente)
        uses: actions/checkout@v3
        with:
          repository: ritatrcr/manifiestos-delivery-app
          token: ${{ secrets.PAT_HELMCHART }}
          path: manifiestos

      - name: Update Helm chart values.yaml image tag
        shell: bash
        run: |
          set -e
          cd charts/pedido-app
          yq eval ".image.tag = \"${DOCKER_VERSION}\"" -i values.yaml

      - name: Update Chart version in Chart.yaml
        shell: bash
        run: |
          set -e
          cd charts/pedido-app
          yq eval ".version = \"${CHART_VERSION}\"" -i Chart.yaml
          yq eval ".appVersion = \"${APP_VERSION}\"" -i Chart.yaml

      - name: Package Helm Chart
        shell: bash
        run: |
          set -e
          
          helm package charts/patrones
          PKG="$(ls -1 patrones-*.tgz | tail -n 1)"
          echo "CHART_PKG=$PKG" >> $GITHUB_ENV
          echo "Empaquetado: $PKG"

      - name: Checkout helm-chart repo (GitHub Pages)
        uses: actions/checkout@v3
        with:
          repository: ritatrcr/helm-chart
          token: ${{ secrets.PAT_HELMCHART }}
          path: helm-chart

      - name: Copy packaged chart to helm-chart repo
        shell: bash
        run: |
          set -e
          cp "manifiestos/${{ env.CHART_PKG }}" helm-chart/
          ls -lah helm-chart

      - name: Update Helm repo index (merge)
        shell: bash
        run: |
          set -e
          cd helm-chart
          if [ -f index.yaml ]; then
            helm repo index . --url https://ritatrcr.github.io/helm-chart/ --merge index.yaml
          else
            helm repo index . --url https://ritatrcr.github.io/helm-chart/
          fi
          cat index.yaml | head -n 40

      - name: Commit and push changes to helm-chart repo
        shell: bash
        run: |
          set -e
          cd helm-chart
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull --rebase || true
          git add .
          git commit -m "Publish chart patrones ${CHART_VERSION}" || echo "No commit needed"
          git push origin main